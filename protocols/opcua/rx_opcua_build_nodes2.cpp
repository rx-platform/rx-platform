
/****************************************************************************
* This file is automatically generated by <opcgen-nodes> tool
*
* Generated at:1/12/2023 5:44 PM
*
****************************************************************************/

#include "pch.h"
#include "rx_opcua_build_nodes2.h"

#include "rx_opcua_build_nodes2_1.h"
#include "rx_opcua_build_nodes2_2.h"

namespace protocols {
namespace opcua {
namespace opcua_addr_space {

rx_result opcua_std_address_space_builder::build_standard_address_space_UANodeSet2(opcua_std_address_space&server)
{
	server.registered_nodes_.reserve(1698);
	server.registered_valued_nodes_.reserve(2579);
	rx_result result;
	for (size_t i = 0; i < sizeof(std_opcua_nodes_1)/sizeof(std_opcua_nodes_1[0]); i++)
		server.registered_nodes_.push_back(std::make_shared<opcua_std_node>(std_opcua_nodes_1[i]));
	for (size_t i = 0; i < sizeof(std_opcua_nodes_2)/sizeof(std_opcua_nodes_2[0]); i++)
		server.registered_valued_nodes_.push_back(std::make_shared<opcua_std_valued_node>(std_opcua_nodes_2[i]));
	uint32_t node_idx=0;
	uint32_t val_node_idx=0;
	for (size_t i = 0; i < sizeof(std_opcua_nodes_1)/sizeof(std_opcua_nodes_1[0]); i++)
	{
		server.registered_nodes_[node_idx]->resolve_std_references(std_opcua_nodes_1[i], server);
		node_idx++;
	}
	for (size_t i = 0; i < sizeof(std_opcua_nodes_2)/sizeof(std_opcua_nodes_2[0]); i++)
	{
		server.registered_valued_nodes_[val_node_idx]->resolve_std_references(std_opcua_nodes_2[i].base_data, server);
		val_node_idx++;
	}
	if (!result)
		return result;
	//Building references tree
	server.references_tree_ = opcua_std_address_space::references_tree_type {
		{ 31, {32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 117, 129, 131, 3065, 9004, 9005, 9006, 14476, 14936, 15112, 15296, 15297, 16361, 16362, 17276, 17597, 17603, 17604, 17983, 17984, 17985, 18804, 18805, 23469, 23562, 24136, 24137, 25237, 25238, 25253, 25254, 25255, 25256, 25257, 25258, 25259, 25260, 25261, 25262, 25263, 25264, 25265, 25345 } }
		, { 32, {37, 38, 39, 40, 41, 51, 52, 53, 54, 117, 3065, 9004, 9005, 9006, 17276, 17597, 17603, 17983, 17984, 17985, 23469, 23562, 24137, 25237, 25253, 25255, 25257, 25258, 25259, 25260, 25261, 25265 } }
		, { 33, {34, 35, 36, 44, 45, 46, 47, 48, 49, 56, 129, 131, 14476, 14936, 15112, 15296, 15297, 16361, 16362, 17604, 18804, 18805, 24136, 25238, 25254, 25256, 25262, 25263, 25264, 25345 } }
		, { 34, {44, 45, 46, 47, 49, 56, 129, 131, 14476, 15112, 15296, 15297, 16361, 17604, 18804, 18805, 24136, 25262, 25263, 25264 } }
		, { 35, {16362 } }
		, { 36, {48 } }
		, { 37, { } }
		, { 38, { } }
		, { 39, { } }
		, { 40, { } }
		, { 41, {3065 } }
		, { 44, {46, 47, 49, 56, 129, 131, 14476, 15112, 15296, 15297, 16361, 17604, 18804, 18805, 24136, 25262, 25263, 25264 } }
		, { 45, { } }
		, { 46, { } }
		, { 47, {49, 129, 131, 14476, 15112, 15296, 15297, 16361, 17604, 18804, 18805, 24136, 25262, 25263, 25264 } }
		, { 48, { } }
		, { 49, { } }
		, { 51, { } }
		, { 52, { } }
		, { 53, { } }
		, { 54, {17276, 17983, 17984, 17985 } }
		, { 56, { } }
		, { 117, { } }
		, { 129, {131 } }
		, { 131, { } }
		, { 3065, { } }
		, { 9004, { } }
		, { 9005, { } }
		, { 9006, { } }
		, { 14476, { } }
		, { 14936, { } }
		, { 15112, { } }
		, { 15296, { } }
		, { 15297, { } }
		, { 16361, { } }
		, { 16362, { } }
		, { 17276, { } }
		, { 17597, { } }
		, { 17603, { } }
		, { 17604, { } }
		, { 17983, { } }
		, { 17984, { } }
		, { 17985, { } }
		, { 18804, { } }
		, { 18805, { } }
		, { 23469, { } }
		, { 23562, { } }
		, { 24136, { } }
		, { 24137, { } }
		, { 25237, { } }
		, { 25238, { } }
		, { 25253, { } }
		, { 25254, { } }
		, { 25255, {25261, 25265 } }
		, { 25256, { } }
		, { 25257, { } }
		, { 25258, {25259, 25260 } }
		, { 25259, { } }
		, { 25260, { } }
		, { 25261, { } }
		, { 25262, {25263, 25264 } }
		, { 25263, { } }
		, { 25264, { } }
		, { 25265, { } }
		, { 25345, { } }
	};
	return result;
};

} //namespace protocols
} //namespace opcua
} //namespace opcua_addr_space
